// Code generated by goctl. DO NOT EDIT.
// Source: modulation.proto

package modulationrpc

import (
	"context"

	"modulation/rpc/modulation"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	CodeStatusRequest          = modulation.CodeStatusRequest
	CodeStatusResponse         = modulation.CodeStatusResponse
	OrderDetailsReq            = modulation.OrderDetailsReq
	OrderDetailsResp           = modulation.OrderDetailsResp
	RequestConsumptionRequest  = modulation.RequestConsumptionRequest
	RequestConsumptionResponse = modulation.RequestConsumptionResponse

	ModulationRpc interface {
		// 查询消费码状态
		QueryCodeStatus(ctx context.Context, in *CodeStatusRequest, opts ...grpc.CallOption) (*CodeStatusResponse, error)
		// 用户申请消费码返回给用户
		RequestConsumption(ctx context.Context, in *RequestConsumptionRequest, opts ...grpc.CallOption) (*RequestConsumptionResponse, error)
		// 二维码订单查询
		OrderDetailsLogic(ctx context.Context, in *OrderDetailsReq, opts ...grpc.CallOption) (*OrderDetailsResp, error)
	}

	defaultModulationRpc struct {
		cli zrpc.Client
	}
)

func NewModulationRpc(cli zrpc.Client) ModulationRpc {
	return &defaultModulationRpc{
		cli: cli,
	}
}

// 查询消费码状态
func (m *defaultModulationRpc) QueryCodeStatus(ctx context.Context, in *CodeStatusRequest, opts ...grpc.CallOption) (*CodeStatusResponse, error) {
	client := modulation.NewModulationRpcClient(m.cli.Conn())
	return client.QueryCodeStatus(ctx, in, opts...)
}

// 用户申请消费码返回给用户
func (m *defaultModulationRpc) RequestConsumption(ctx context.Context, in *RequestConsumptionRequest, opts ...grpc.CallOption) (*RequestConsumptionResponse, error) {
	client := modulation.NewModulationRpcClient(m.cli.Conn())
	return client.RequestConsumption(ctx, in, opts...)
}

// 二维码订单查询
func (m *defaultModulationRpc) OrderDetailsLogic(ctx context.Context, in *OrderDetailsReq, opts ...grpc.CallOption) (*OrderDetailsResp, error) {
	client := modulation.NewModulationRpcClient(m.cli.Conn())
	return client.OrderDetailsLogic(ctx, in, opts...)
}
