// Code generated by goctl. DO NOT EDIT.

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	orderDetailsFieldNames          = builder.RawFieldNames(&OrderDetails{})
	orderDetailsRows                = strings.Join(orderDetailsFieldNames, ",")
	orderDetailsRowsExpectAutoSet   = strings.Join(stringx.Remove(orderDetailsFieldNames, "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	orderDetailsRowsWithPlaceHolder = strings.Join(stringx.Remove(orderDetailsFieldNames, "`Uid`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"

	cacheOrderDetailsUidPrefix = "cache:orderDetails:uid:"
)

type (
	orderDetailsModel interface {
		Insert(ctx context.Context, data *OrderDetails) (sql.Result, error)
		FindOne(ctx context.Context, uid string) (*OrderDetails, error)
		Update(ctx context.Context, data *OrderDetails) error
		Delete(ctx context.Context, uid string) error
	}

	defaultOrderDetailsModel struct {
		sqlc.CachedConn
		table string
	}

	OrderDetails struct {
		PayStatus       string       `db:"PayStatus"`
		PayDate         sql.NullTime `db:"PayDate"`
		PayTime         sql.NullTime `db:"PayTime"`
		TotalFee        string       `db:"TotalFee"`
		PayCouponFee    string       `db:"PayCouponFee"`
		PayOutTradeNo   string       `db:"PayOutTradeNo"`
		PayErrDesc      string       `db:"PayErrDesc"`
		Uid             string       `db:"Uid"`
		PayType         string       `db:"PayType"`
		PayTypeTradeNo  string       `db:"PayTypeTradeNo"`
		OutRequestNo    string       `db:"OutRequestNo"`
		DimensionalCode string       `db:"DimensionalCode"`
		BarCode         string       `db:"BarCode"`
	}
)

func newOrderDetailsModel(conn sqlx.SqlConn, c cache.CacheConf) *defaultOrderDetailsModel {
	return &defaultOrderDetailsModel{
		CachedConn: sqlc.NewConn(conn, c),
		table:      "`orderDetails`",
	}
}

func (m *defaultOrderDetailsModel) Delete(ctx context.Context, uid string) error {
	orderDetailsUidKey := fmt.Sprintf("%s%v", cacheOrderDetailsUidPrefix, uid)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `Uid` = ?", m.table)
		return conn.ExecCtx(ctx, query, uid)
	}, orderDetailsUidKey)
	return err
}

func (m *defaultOrderDetailsModel) FindOne(ctx context.Context, uid string) (*OrderDetails, error) {
	orderDetailsUidKey := fmt.Sprintf("%s%v", cacheOrderDetailsUidPrefix, uid)
	var resp OrderDetails
	err := m.QueryRowCtx(ctx, &resp, orderDetailsUidKey, func(ctx context.Context, conn sqlx.SqlConn, v any) error {
		query := fmt.Sprintf("select %s from %s where `Uid` = ? limit 1", orderDetailsRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, uid)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultOrderDetailsModel) Insert(ctx context.Context, data *OrderDetails) (sql.Result, error) {
	orderDetailsUidKey := fmt.Sprintf("%s%v", cacheOrderDetailsUidPrefix, data.Uid)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)", m.table, orderDetailsRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.PayStatus, data.PayDate, data.PayTime, data.TotalFee, data.PayCouponFee, data.PayOutTradeNo, data.PayErrDesc, data.Uid, data.PayType, data.PayTypeTradeNo, data.OutRequestNo, data.DimensionalCode, data.BarCode)
	}, orderDetailsUidKey)
	return ret, err
}

func (m *defaultOrderDetailsModel) Update(ctx context.Context, data *OrderDetails) error {
	orderDetailsUidKey := fmt.Sprintf("%s%v", cacheOrderDetailsUidPrefix, data.Uid)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `Uid` = ?", m.table, orderDetailsRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, data.PayStatus, data.PayDate, data.PayTime, data.TotalFee, data.PayCouponFee, data.PayOutTradeNo, data.PayErrDesc, data.PayType, data.PayTypeTradeNo, data.OutRequestNo, data.DimensionalCode, data.BarCode, data.Uid)
	}, orderDetailsUidKey)
	return err
}

func (m *defaultOrderDetailsModel) formatPrimary(primary any) string {
	return fmt.Sprintf("%s%v", cacheOrderDetailsUidPrefix, primary)
}

func (m *defaultOrderDetailsModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary any) error {
	query := fmt.Sprintf("select %s from %s where `Uid` = ? limit 1", orderDetailsRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultOrderDetailsModel) tableName() string {
	return m.table
}
