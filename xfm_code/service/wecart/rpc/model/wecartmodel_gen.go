// Code generated by goctl. DO NOT EDIT.

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	wecartFieldNames          = builder.RawFieldNames(&Wecart{})
	wecartRows                = strings.Join(wecartFieldNames, ",")
	wecartRowsExpectAutoSet   = strings.Join(stringx.Remove(wecartFieldNames, "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	wecartRowsWithPlaceHolder = strings.Join(stringx.Remove(wecartFieldNames, "`url`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"

	cacheWecartUrlPrefix = "cache:wecart:url:"
)

type (
	wecartModel interface {
		Insert(ctx context.Context, data *Wecart) (sql.Result, error)
		FindOne(ctx context.Context, url string) (*Wecart, error)
		Update(ctx context.Context, data *Wecart) error
		Delete(ctx context.Context, url string) error
	}

	defaultWecartModel struct {
		sqlc.CachedConn
		table string
	}

	Wecart struct {
		Status string `db:"status"` // status
		Url    string `db:"url"`    // original url
	}
)

func newWecartModel(conn sqlx.SqlConn, c cache.CacheConf, opts ...cache.Option) *defaultWecartModel {
	return &defaultWecartModel{
		CachedConn: sqlc.NewConn(conn, c, opts...),
		table:      "`wecart`",
	}
}

func (m *defaultWecartModel) Delete(ctx context.Context, url string) error {
	wecartUrlKey := fmt.Sprintf("%s%v", cacheWecartUrlPrefix, url)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `url` = ?", m.table)
		return conn.ExecCtx(ctx, query, url)
	}, wecartUrlKey)
	return err
}

func (m *defaultWecartModel) FindOne(ctx context.Context, url string) (*Wecart, error) {
	wecartUrlKey := fmt.Sprintf("%s%v", cacheWecartUrlPrefix, url)
	var resp Wecart
	err := m.QueryRowCtx(ctx, &resp, wecartUrlKey, func(ctx context.Context, conn sqlx.SqlConn, v any) error {
		query := fmt.Sprintf("select %s from %s where `url` = ? limit 1", wecartRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, url)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultWecartModel) Insert(ctx context.Context, data *Wecart) (sql.Result, error) {
	wecartUrlKey := fmt.Sprintf("%s%v", cacheWecartUrlPrefix, data.Url)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?)", m.table, wecartRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.Status, data.Url)
	}, wecartUrlKey)
	return ret, err
}

func (m *defaultWecartModel) Update(ctx context.Context, data *Wecart) error {
	wecartUrlKey := fmt.Sprintf("%s%v", cacheWecartUrlPrefix, data.Url)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `url` = ?", m.table, wecartRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, data.Status, data.Url)
	}, wecartUrlKey)
	return err
}

func (m *defaultWecartModel) formatPrimary(primary any) string {
	return fmt.Sprintf("%s%v", cacheWecartUrlPrefix, primary)
}

func (m *defaultWecartModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary any) error {
	query := fmt.Sprintf("select %s from %s where `url` = ? limit 1", wecartRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultWecartModel) tableName() string {
	return m.table
}
